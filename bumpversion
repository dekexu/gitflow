#!/bin/bash

# This script is implemented according to the [pete-otaqui]'s bumpversion.sh
#   https://gist.github.com/pete-otaqui/4188238 and [Vincent Driessen]'s A Successful Git Branching model
#   http://nvie.com/posts/a-successful-git-branching-model/
# 
# when in master branch, it will exec `git tag`
# when in dev branch, it will not allow you to exec any command
# when in hotfix-{major}.{minor}.{patch}, exec this script after all your work done,
#   and it just trace all the changes and change the version by {patch}. 
# when in release-{major}.{minor}.{patch}, exec this script after all you work done,
#   and it just trace all the changes and change the version by {minor}.
# when in any new feature branch, it will not allow you to exec script.
# 

lowcase(){
  local __temp=$1
  local result=''
  for (( i=0; i<${#temp}; i++ )); do
    case "${temp:$i:1}" in
      [A-Z])
      n=$(printf "%d" "'${temp:$i:1}")
      n=$((n+32))
      result="$result$(printf \\$(printf "%o" "$n"))"
    esac
  done
  eval $__temp="'$result'"
}

inarray () {
  local e
  for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 0; done
  return 1
}

CURRENT_BRANCH=`git rev-parse --abbrev-ref HEAD`

if [ -f VERSION ]; then
  version=`cat VERSION`
  version_list=(`echo $version | tr '.' ' '`)
  branch_info=(`echo $CURRENT_BRANCH | tr '-' ' '`)
  v_major=${version_list[0]}
  v_minor=${version_list[1]}
  v_patch=${version_list[2]}
  recommended_version=''

  if [ "${branch_info[0]}" == "hotfix" ]; then
    recommended_version="$v_major.$v_minor.$((v_patch + 1))"
  elif [ "${branch_info[0]}" == "release" ]; then
    recommended_version="$v_major.$((v_minor + 1)).0"
  elif [ "${branch_info[0]}" == "master" ]; then
    git tag -a -m "Tagging version $version" "$version"
    echo "Tagging versin $version Success"
    exit 1
  elif [ "${branch_info[0]}" == "dev" ]; then
    echo "Now you're in development env. Do not try to exec this script!"
    exit 1
  else
    echo "Branch name is not prefixed by 'hotfix' or 'release'. Do not try to exec this script"
  fi

  read -p "Enter a version number, [$version] -> [$recommended_version]:" input_version
  if [ "$input_version" == "" ]; then
    input_version=$recommended_version
  fi
  input_version_list=(`echo $input_version | tr '.' ' '`)
  for (( i=0; i<3; i++ )); do
    if [ -z ${input_version_list[i]} ]; then
      input_version_list[i]="0"
    fi
  done
  input_version_major=${input_version_list[0]}
  input_version_minor=${input_version_list[1]}
  input_version_patch=${input_version_list[2]}

  if (( "$input_version_major" > "$v_major" )) || (( "$input_version_major" == "$v_major" && "$input_version_minor" > "$v_minor" )) || (( "$input_version_major" == "$v_major" && "$input_version_minor" == "$v_minor" && "$input_version_patch" > "$v_patch" )) ; then
    result_version="$input_version_major.$input_version_minor.$input_version_patch"
    echo "Will set new version to $result_version"
    echo $result_version > VERSION
    echo "Version $result_version:" > tmpfile
    git log --pretty=format:" -%an %s" "$version...HEAD" >> tmpfile
    echo "" >> tmpfile
    echo "" >> tmpfile
    cat CHANGES >> tmpfile
    mv tmpfile CHANGES
    git add CHANGES VERSION
    git commit -m "Version bump to $result_version"
  else
    echo "Version number illegal"
  fi
else
  echo "VERSION file not found in current project"
  read -p "Do you want to create a VERSION file [y/n]" input
  lowcase $input
  container=("yes" "y")
  inarray $input ${container[@]}
  if [ $? == 0 ]; then input="y"; fi
  if [ "$input" == "y" ]; then
    echo "0.1.0" > VERSION
    echo "VERSION file added"
    echo "Version 0.1.0" > CHANGES
    echo "CHANGES file added"
    if [ "$CURRENT_BRANCH" == "master" ]; then
      git add VERSION CHANGES
      git commit -m "VERSION and CHANGES file added, Version bumped to 0.1.0"
      git tag -a 0.1.0
      echo "Git current tag is 0.1.0"
    else
      echo "Current branch is not in master"
      echo "Please do it by yourself when checkout master"
      echo "$(tput setaf 1)git tag -a 0.1.0"
      echo "$(tput setaf 0) "
    fi
  fi
fi